<?php

/**
 * Implement hook_menu().
 */
function ccis_menu() {
  $path = 'admin/ccis';
  $items[$path] = array(
    'title' => 'CCIS',
    'description' => 'CCIS related settings',
    'page callback' => 'ccis_admin_overview',
    'access arguments' => array('access_ccis_admin_overview'),
    'position' => 'left',
  );
  $items[$path . '/csv-import'] = array(
    'title' => 'Climate data import',
    'access arguments' => array('csv_import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ccis_import_files_form'),
    'file' => 'ccis.import.inc',
  );
  $items[$path . '/xml-import'] = array(
    'title' => 'Climate station import',
    'access arguments' => array('xml_import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ccis_xml_import_files_form'),
    'file' => 'ccis.import.inc',
  );
  $items[$path . '/search'] = array(
    'title' => 'Search',
    'access arguments' => array('access_ccis_search_settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ccis_search_settings'),
    'file' => 'ccis.admin.inc',
  );
  $items[$path . '/permissions'] = array(
    'title' => 'Climate data permissions',
    'access arguments' => array('access_weather_data_perms'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ccis_weather_data_permissions'),
    'file' => 'ccis.admin.inc',
  );
  $items['ccis/dataquery/%'] = array(
    'title' => 'Data query',
    'access callback' => TRUE,
    'page callback' => 'ccis_dataquery_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ccis/autocomplete/%'] = array(
    'title' => 'Autocomplete',
    'access callback' => TRUE,
    'page callback' => 'ccis_autocomplete_response',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function ccis_permission() {
  $perms['csv_import'] = array(
    'title' => t('CSV import'),
    'description' => t('Allows a user to upload and import the csv files.')
  );
  $perms['xml_import'] = array(
    'title' => t('XML import'),
    'description' => t('Allows a user to upload and import the xml files.')
  );
  $perms['access_ccis_admin_overview'] = array(
    'title' => t('Access CCIS admin overview'),
  );
  $perms['access_ccis_search_settings'] = array(
    'title' => t('Access CCIS search settings'),
  );
  $perms['access_weather_data_perms'] = array(
    'title' => t('Access CCIS climate data permission settings'),
  );
  $perms['access_ccis_all_weather_data'] = array(
    'title' => t('Access to all climate data'),
  );
  $perms['access_ccis_download_link'] = array(
    'title' => t('Access csv download link'),
    'description' => t('Allows a user to download the displayed weather data as csv file.'),
  );
  $fields = _ccis_get_weather_data_labels(FALSE);
  $fields_per_range = variable_get('ccis_weather_data_perms_range', array());
  $fields_per_range = array_filter($fields_per_range);
  $ranges = _ccis_get_range_label(TRUE);
  foreach ($fields as $fieldname => $fieldlabel) {
    if (!empty($fields_per_range[$fieldname])) {
      foreach ($ranges as $range => $label) {
        $perm_key = "access_ccis_{$fieldname}_{$range}";
        $perms[$perm_key] = array(
          'title' => t('View data of !field in %range', array(
            '!field' => $fieldlabel,
            '%range' => $label,
          )),
        );
      }
    }
    else{
      $perms["access_ccis_{$fieldname}"] = array(
        'title' => t('View data of !field', array(
          '!field' => $fieldlabel,
        )),
      );
    }
  }
  return $perms;
}

/**
 * Implement hook_help().
 */
function ccis_help($path, $arg) {
  switch ($path) {
    case 'admin/ccis/search':
      return t('The selected fields of the weather station are searchable in the filter form of the weather station dashboard.');
      break;
    case 'admin/ccis/permissions':
      return t('For all selected fields of the weather data you get new view permissions per date range (daily, monthly) etc. .');

  }
}

/**
 * Implement hook_block_info().
 */
function ccis_block_info() {
  $blocks['filter'] = array(
    'info' => 'Station Filter',
  );
  $blocks['stationinfo'] = array(
    'info' => 'Station Info',
  );
  $blocks['stationinfo_2'] = array(
    'info' => 'Station Info 2',
  );
  $blocks['stationmap'] = array(
    'info' => 'Station map',
  );
  $blocks['d3'] = array(
    'info' => 'D3 Graph',
  );
  $blocks['d3_2'] = array(
    'info' => 'D3 Graph 2',
  );
  $blocks['datatables'] = array(
    'info' => 'Datatable',
  );
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function ccis_block_view($delta) {
  $block = array();
  $params = drupal_get_query_parameters();
  $node = _ccis_get_station_node($params);
  switch ($delta) {
    case 'filter':
      $block['subject'] = '<none>';
      $block['content'] =  _ccis_block_filter($node);
      break;
    case 'd3':
      $range = _ccis_get_date_range($params);
      $list = _ccis_get_listname($node, $range);
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_d3($list, $params);
      break;
    case 'd3_2':
      $block['subject'] = '<none>';
      $block['content'] = '<div id="ccis-weather-d3-block-2"></div>';
      break;
    case 'datatables':
      $range = _ccis_get_date_range($params);
      $list = _ccis_get_listname($node, $range);
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_datatables($list, $params);
      break;
    case 'stationinfo':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_stationinfo($node);
      break;
    case 'stationinfo_2':
      $block['subject'] = '<none>';
      $block['content'] = '<div id="ccis-station-info-block-2" data-hide-portlet=1></div>';
      break;
    case 'stationmap':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_stationmap($node);
      break;
  }
  return $block;
}

/**
 * Implement hook_date_format_types().
 */
function ccis_date_format_types() {
  return array(
    'datatable' => t('Datatable'),
  );
}

/**
 * Implement hook_date_formats().
 */
function ccis_date_formats() {
  return array(
    array(
      'type' => 'datatable',
      'format' => 'd.m.Y',
      'locales' => array('de-de'),
    ),
    array(
      'type' => 'datatable',
      'format' => 'Y-m-d',
      'locales' => array(),
    ),
  );
}

/**
 * Implement hook_openlayers_map_alter().
 */
function ccis_openlayers_map_alter(&$map = array()) {
  $path = drupal_get_path('module', 'ccis');
  drupal_add_js($path . '/libs/OpenLayers.Popup.Popover/Popover.js');
}

/**
 * Implements hook_features_pipe_COMPONENT_alter().
 */
function ccis_features_pipe_variable_alter(&$pipe, $data, $export) {
  if (!empty($data)) {
    foreach ($data as $variable) {
      if (strpos($variable, 'ccis_') === 0) {
        $pipe['dependencies'][] = 'ccis';
      }
    }
  }
}

/**
 * Implements hook_features_pipe_COMPONENT_alter().
 */
function ccis_features_pipe_user_permission_alter(&$pipe, $data, $export) {
  if (!empty($data)) {
    foreach ($data as $permission) {
      if (strpos($permission, 'access_ccis_field_') === 0) {
        $pipe['variable']['ccis_weather_data_perms_range'] = 'ccis_weather_data_perms_range';
        break;
      }
    }
  }
}

/**
 * Page callback for all ccis admin pages.
 */
function ccis_admin_overview() {
  $system = drupal_get_path('module', 'system');
  include_once $system . '/system.admin.inc';
  return system_admin_menu_block_page();
}

/**
 * Return the json or csv output of a list.
 * @param string $list
 *   The list name like bremen_daily, bremen_monthly etc.
 * @param string $format
 *   The output format json or csv. Default json.
 */
function ccis_dataquery_page($list, $source = 'unknown', $format = 'json') {
  $supported_formats = array('json', 'csv');
  $supported_sources = array('d3', 'datatables', 'download');
  $error = FALSE;
  if (!in_array($format, $supported_formats)) {
    watchdog('ccis', 'Overgiven format: @format is not supported', array('@format' => $format), WATCHDOG_ERROR);
    $error = TRUE;
  }
  if (!in_array($source, $supported_sources)) {
    watchdog('ccis', 'Overgiven source: @source is not supported', array('@source' => $source), WATCHDOG_ERROR);
    $error = TRUE;
  }
  if ($error) {
    drupal_json_output(array());
    drupal_exit();
  }
  if ($source == 'download' && !user_access('access_ccis_download_link')) {
    drupal_access_denied();
    return '';
  }
  $params = drupal_get_query_parameters();
  try{
    $col = mongodb_collection($list);
    $query = array();
    if (!empty($params['start']) && !empty($params['end'])) {
      $query = array('date' => array('$gte' => $params['start'], '$lt' => $params['end']));
    }
    $limit = variable_get('ccis_default_displayed_data_limit', 180);
    $labels = _ccis_get_weather_data_labels($list);
    $fields = array();
    foreach ($labels as $key => $label) {
      $_key = str_replace('field_', '', $key);
      $fields[$_key] = TRUE;
    }
    $output = $header = array();
    if (!empty($fields)) {
      $docs = $col->find($query, $fields)->limit($limit);
      $row = 1;
    }
    if (!empty($fields) && $docs->hasNext()) {
      foreach ($docs as $doc) {
        unset($doc['_id']);
        $header = array_keys($doc);
        if ($source == 'datatables') {
          if (!empty($doc['date'])) {
            $doc['date'] = format_date(strtotime($doc['date']), 'datatable');
          }
          $output[] = array_values($doc);
        }
        else{
          $output[] = $doc;
        }
      }
      if ($format == 'json') {
        if ($source == 'datatables') {
          echo drupal_json_output(array('aaData' => $output, 'fields' => $header));
        }
        else{
          echo drupal_json_output($output);
        }
      }
      else{
        $header = array_keys(reset($output));
        $output = array_merge(array($header), $output);
        drupal_add_http_header('Content-Type', 'text/csv; charset=utf-8');
        echo _ccis_outputCSV($output);
      }
    }
    else{
      if ($source == 'datatables') {
        echo drupal_json_output(array('aaData' => $output));
      }
      else{
        echo drupal_json_output($output);
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('ccis', $e);
  }
  drupal_exit();
}


/**
 * Copy from http://www.php.net/manual/de/function.fputcsv.php#100033
 */
function _ccis_outputCSV($data) {

  $outstream = fopen("php://output", 'w');

  function __outputCSV(&$vals, $key, $filehandler) {
    fputcsv($filehandler, $vals, ',', '"');
  }
  array_walk($data, '__outputCSV', $outstream);

  fclose($outstream);
}

/**
 * Block output for the filter.
 */
function _ccis_block_filter($node) {
  $form = drupal_get_form('ccis_block_filter_form', $node);
  return drupal_render($form);
}

/**
 * Filter form.
 */
function ccis_block_filter_form($form, $form_state, $node = NULL) {
  $form['station_input'] = array(
    '#type' => 'fieldset',
  );
  $form['station_input']['headline'] = array(
    '#markup' => '<h3 class="dashboard-title"><span>' . t('Stations') . '</span></h3>',
  );
  $form['station_input']['input1'] = array(
    '#title' => t('Station 1'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'ccis/autocomplete/station_search',
    '#title_display' => 'invisible',
    '#description' => t('Enter a station name, Station code etc.'),
    '#default_value' => isset($node->title) ? "$node->title ($node->nid)" : '',
    '#field_prefix' => 1,
    '#attributes' => array('class' => array('form-autocomplete-mousedown')),
  );
  $form['station_input']['input2'] = array(
    '#title' => t('Station 2'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'ccis/autocomplete/station_search',
    '#title_display' => 'invisible',
    '#description' => t('Enter a station name, Station code to compare.'),
    '#field_prefix' => 2,
    '#attributes' => array('class' => array('form-autocomplete-mousedown')),
    '#states' => array(
      'visible' => array(
        array('#edit-input2' => array('filled' => TRUE)),
        array('#edit-input1' => array('filled' => TRUE)),
        array(':input[name="station[2]"]' => array('checked' => TRUE))
      ),
    ),
  );
  $form['filter'] = array(
    '#type' => 'fieldset',
  );
  $form['filter']['headline'] = array(
    '#markup' => '<h3 class="dashboard-title"><span>' . t('Filter') . '</span></h3>',
  );
  $form['filter']['searchterm'] = array(
    '#title' => t('Search'),
    '#type' => 'textfield',
    '#description' => t('Enter metadata search term.'),
    '#ajax' => array(
      'callback' => 'ccis_block_filter_form_ajax_searchterms',
      'wrapper' => 'ccis-station-search-result',
    ),
  );
  $form['filter']['region'] = array(
    '#title' => t('Region'),
    '#type' => 'select',
    '#options' => _ccis_get_station_regions(),
    '#empty_value' => '',
    '#empty_option' => t('Select a region'),
    '#ajax' => array(
      'callback' => 'ccis_block_filter_form_ajax_searchterms',
      'wrapper' => 'ccis-station-search-result',
    ),
  );
  $form['filter']['start'] = array(
    '#title' => t('From'),
    '#type' => 'date_popup',
    '#date_year_range' => '-100:0',
    '#date_format' => variable_get('date_format_datatable', 'Y-m-d'),
  );
  $form['filter']['end'] = array(
    '#title' => t('To'),
    '#type' => 'date_popup',
    '#date_year_range' => '-100:0',
    '#date_format' => variable_get('date_format_datatable', 'Y-m-d'),
  );
  $search_result = '';
  if (!empty($form_state['values'])) {
    $search_result = ccis_search_terms_finder_list($form_state['values']);
  }
  $form['actions'] = array('#type' => 'actions', '#weight' => 1);
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#ajax' => array('callback' => 'ccis_block_filter_form_ajax_submit'),
    '#attributes' => array('class' => array('use-ajax-submit')),
  );
  $form['searchresult'] = array(
    '#markup' => $search_result,
    '#prefix' => '<div id="ccis-station-search-result">',
    '#suffix' => '</div>',
    '#weight' => 2,
  );
  $form['#attached']['js'] = array(drupal_get_path('module', 'ccis') . '/js/base.ccis.js');
  return $form;
}

/**
 * Submit handler for the form _ccis_block_filter_form().
 */
function ccis_block_filter_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $form_state['redirect'] = array(current_path(), array('query' => $form_state['values']));
}

/**
 * Ajax submit handler for the form _ccis_block_filter_form().
 */
function ccis_block_filter_form_ajax_submit($form, &$form_state) {
  form_state_values_clean($form_state);

  $station_1 = _ccis_get_station_node($form_state['values']);
  $station_2 = _ccis_get_station_node($form_state['values'], 'input2');
  if (empty($station_1)) {
    $station_1 = $station_2;
    $station_2 = NULL;
  }

  $range = _ccis_get_date_range($form_state['values']);

  $list1 = _ccis_get_listname($station_1, $range);
  $settings = _ccis_get_d3_settings($list1, $form_state['values']);

  $list2 = _ccis_get_listname($station_2, $range);
  $settings = _ccis_get_d3_settings($list2, $form_state['values'], 2);
  $commands[] = ajax_command_settings($settings, TRUE);

  $settings = _ccis_get_datatables_settings($list1, $form_state['values']);
  $settings = _ccis_get_datatables_settings($list2, $form_state['values'], 2);
  $commands[] = ajax_command_settings($settings, TRUE);

  $commands[] = ajax_command_data('#ccis-weather-d3-block-1', 'refresh', '1');
  $commands[] = ajax_command_data('#ccis-weather-d3-block-2', 'refresh', '1');
  $commands[] = ajax_command_data('#ccis-weather-datatable-block', 'refresh', '1');

  $commands[] = ajax_command_replace('#ccis-station-info-block-1', _ccis_block_stationinfo($station_1));
  if (!empty($station_2)) {
    $commands[] = ajax_command_replace('#ccis-station-info-block-2', _ccis_block_stationinfo($station_2, 2));
  }
  else{
    // Reset the block with a empty div.
    $commands[] = ajax_command_replace('#ccis-station-info-block-2', '<div id="ccis-station-info-block-2 data-hide-portlet=1"></div>');
  }

  $commands[] = ajax_command_replace('#ccis-station-map-block', _ccis_block_stationmap(array($station_1, $station_2)));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Block output for the D3 graph.
 */
function _ccis_block_d3($list, $params, $id = 1) {
  $d3 = libraries_get_path('d3');
  drupal_add_js($d3. '/d3.v3.min.js', array('group' => JS_LIBRARY));
  $path = drupal_get_path('module', 'ccis');
  drupal_add_js($path . '/js/jquery.slimscroll.js', array('group' => JS_LIBRARY));

  drupal_add_library('system', 'ui.accordion');

  drupal_add_js($path . '/js/d3.ccis.js', array('weight' => 5));
  drupal_add_css($path . '/css/d3.css');
  drupal_add_js(_ccis_get_d3_settings($list, $params, $id), 'setting');

  $output = '<div data-refresh="1" id="ccis-weather-d3-block-' . $id . '">';
  $output .= '</div>';
  return $output;
}

function _ccis_get_d3_settings($list = 'unknown', $values, $id = 1) {
  static $stations;
  $range = _ccis_get_date_range($values);
  $settings = array();
  $settings['ccis'] = array(
    'legends' => _ccis_get_weather_data_labels(),
    'range' => _ccis_get_range_label($range),
  );
  $node = _ccis_get_station_node($values, 'input'.$id);
  $stations[] = array(
    'selector' => "ccis-weather-d3-block-$id",
    'path' => url("ccis/dataquery/$list/d3", array('query' => $values)),
    'station_name' => isset($node->title) ? check_plain($node->title) : '',
  );
  $settings['ccis']['stations'] = $stations;
  return $settings;
}

function _ccis_block_datatables($list = 'unknown', $values) {
  $path = libraries_get_path('datatables');
  drupal_add_js($path . '/media/js/jquery.dataTables.js');
  drupal_add_js($path . '/extras/ColVis/media/js/ColVis.min.js');
  drupal_add_js($path . '/extras/ColReorder/media/js/ColReorder.min.js');

  drupal_add_css($path . '/media/css/demo_table.css');
  drupal_add_css($path . '/extras/ColReorder/media/css/ColReorder.css');
  drupal_add_css($path . '/extras/ColVis/media/css/ColVis.css');

  $path = drupal_get_path('module', 'ccis');
  drupal_add_js($path . '/js/datatables.ccis.js', array('weight' => 6));
  if ($list !== 'unknown') {
    drupal_add_js(_ccis_get_datatables_settings($list, $values, 1), 'setting');
  }
  else{
    drupal_add_js(array('ccis_dt' => array('stations' => array())), 'setting');
  }
  $output = '<div id="ccis-weather-datatable-block" data-refresh=1>';
  $output .= '</div>';
  return $output;
}

function _ccis_get_datatables_settings($list = 'unknown', $values, $id = 1) {
  static $stations;
  $range = _ccis_get_date_range($values);
  $settings = array();
  $settings['ccis_dt'] = array(
    'legends' => _ccis_get_weather_data_labels(NULL),
    'range' => _ccis_get_range_label($range),
  );
  $download = '';
  if (user_access('access_ccis_download_link')) {
    $link =  l(t('Export data'), "ccis/dataquery/$list/download/csv");
    $download = '<div class="ccis-data-download">' . $link . '</div>';
  }
  $node = _ccis_get_station_node($values, 'input' . $id);
  $stations[] = array(
    'path' => url("ccis/dataquery/$list/datatables", array('query' => $values)),
    'station_name' => isset($node->title) ? check_plain($node->title) : '',
    'download' => $download,
  );
  $settings['ccis_dt']['stations'] = $stations;
  return $settings;
}

function _ccis_get_station_node($values, $key = 'input1') {
  $nid = NULL;
  if (isset($values['nid'])) {
    $nid = $values['nid'];
  }
  elseif (isset($values[$key])) {
    $pattern = "/(.+)\((\d+)\)/";
    preg_match($pattern, $values[$key], $matches);
    $code = isset($matches[2]) ? $matches[2] : NULL;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'weather_station')
      ->propertyCondition('status', 1)
      ->fieldCondition('field_stationcode', 'value', $code, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nid = reset($nids);
    }
  }
  if (!empty($nid)) {
    return node_load($nid);
  }
  return NULL;
}

/**
 * Calculates the range of two dates.
 *
 * @param array $values
 *    An array with at least the values start/end date.
 *
 * @return string
 *   The range yearly|monthly|daily|10_days.
 */
function _ccis_get_date_range($values) {
  static $range;
  if (empty($range)) {
    if (empty($values['start']) || empty($values['end'])) {
      $range = 'yearly';
      return $range;
    }
    $date1 = $values['start'];
    $date2 = $values['end'];

    $diff = abs(strtotime($date2) - strtotime($date1));

    $years = floor($diff / (365*60*60*24));
    $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
    $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
    if ($years < 15) {
      $range = 'monthly';
      if ($years < 5 && $years > 1) {
        $range = '10_days';
      }
      if ($years < 1) {
        $range = 'daily';
      }
    }
  }
  return $range;
}

/**
 * Builds the name of a mongodb collection.
 *
 * @param object $node
 * @param string $range
 *
 * @return string
 */
function _ccis_get_listname($node, $range) {
  $list = 'unknown';
  if (!empty($node)) {
    $items = field_get_items('node', $node, 'field_stationcode');
    if (!empty($items)) {
      $item = reset($items);
      $list = $item['safe_value'];
    }
    $list = $list . '_' . $range;
  }
  return $list;
}

/**
 * Block output for the Station info.
 */
function _ccis_block_stationinfo($node = NULL, $id = 1) {
  $nid = empty($node) ? NULL : $node->nid;
  $view = views_embed_view('station_info', 'embed_1', $nid);

  $output = '<div data-hide-portlet=0 id="ccis-station-info-block-' . $id . '">';
  $output .= $view;
  $output .= '</div>';
  return $output;
}

/**
 * Block output for the Station map.
 */
function _ccis_block_stationmap($nodes = NULL) {
  openlayers_include();
  $nids = array();
  if (!is_array($nodes)) {
    $nodes = array($nodes);
  }
  $nodes = array_filter($nodes);
  foreach ($nodes as $node) {
    $nids[] = $node->nid;
  }
  $nids = empty($nids) ? NULL : implode(',', $nids);
  $view = views_embed_view('station_map', 'embed_1', $nids);
  $hide_portlet = '1';
  if (!empty($view)) {
    $hide_portlet = '0';
  }
  $output = '<div class="ccis-station-map-block" id="ccis-station-map-block" data-hide-portlet=' . $hide_portlet . '>';
  $output .= $view;
  $output .= '</div>';
  return $output;
}

/**
 * A wrapper function to use it as autocomplete in the form api.
 *
 * Autocomplete path: ccis/autocomplete/{type}
 *
 * @param string $type
 *   A fixed value.
 *
 * @param string $string
 *   The typed string in the form.
 */
function ccis_autocomplete_response($type, $string) {
  $matches = array();
  if ($type == 'station_search' && $string) {

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_stationcode', 'f', 'n.nid = f.entity_id');

    $n_and = db_and()->condition('n.title', db_like($string) . '%', 'LIKE');
    $f_and = db_and()->condition('f.field_stationcode_value', db_like($string) . '%', 'LIKE');

    $query->fields('n', array('nid', 'title'))
      ->fields('f', array('field_stationcode_value'))
      ->condition('n.type', 'weather_station')
      ->condition(db_or()->condition($n_and)->condition($f_and))
      ->addTag('node_access')
      ->range(0, 10);
    try{
      $results = $query->execute();
      foreach ($results as $result) {
        // $key will be placed in the input field after the user choose a suggention.
        $key = $result->title . ' (' . $result->field_stationcode_value . ')';
        // $title will be shown to user underneath input field will he typing.
        $title = check_plain($key);
        $matches[$key] = $title;
      }
    }
    catch (Exception $e) {
      watchdog_exception('ccis', $e);
    }
  }
  drupal_json_output($matches);
}

/**
 * Returns the labels of all fields, with optional access checks.
 *
 * @param array $check
 *   Set to FALSE when you do not want the field_access() check. Default TRUE.
 *
 * @return array
 *   An array of field labels keyed by field names.
 */
function _ccis_get_weather_data_labels($list = NULL) {
  $labels = &drupal_static(__FUNCTION__, array());
  if (empty($labels)) {
    $tmp = array();
    $field_infos = field_info_instances('node', 'weather_data');
    foreach ($field_infos as $field_name => $info) {
      $desc = trim($info['description']);
      if (!empty($desc)) {
        $desc = ' title="' . check_plain($desc) . '"';
      }
      $label = '<span class="ccis-datatable-title" ' . $desc . '>';
      $label .= check_plain($info['label']);
      $label .= '</span>';
      if (!empty($info['settings']['suffix'])) {
        $label .= ' <span class="ccis-datatable-unit">' . check_plain($info['settings']['suffix']) . '</span>';
      }
      $tmp[$field_name] = array(
        'label' => $label,
        'weight' => $info['widget']['weight']
      );
      uasort($tmp, 'drupal_sort_weight');
      foreach ($tmp as $key => $value) {
        $labels[$key] = $value['label'];
      }
    }
  }
  if ($list && !user_access('access_ccis_all_weather_data')) {
    $ranges = _ccis_get_range_label(TRUE);
    $fields_per_range = variable_get('ccis_weather_data_perms_range', array());
    $fields_per_range = array_filter($fields_per_range);
    foreach ($labels as $fieldname => $label) {
      if (!empty($fields_per_range[$fieldname])) {
        foreach ($ranges as $range => $label) {
          if (strpos($list, $range) !== FALSE) {
            $perm_key = "access_ccis_{$fieldname}_{$range}";
            if (!user_access($perm_key)) {
              unset($labels[$fieldname]);
            }
          }
        }
      }
      else {
        if (!user_access("access_ccis_{$fieldname}")) {
          unset($labels[$fieldname]);
        }
      }
    }
  }
  return $labels;
}

/**
 * Helper function to round a number before we import it to mongodb.
 *
 * @return number
 */
function _ccis_round(&$value, $key) {
  $fields = _ccis_get_fields_for_fieldtype('number_decimal');
  $value = trim($value);
  if (!empty($fields[$key]) && $value != 'NA') {
    $value = round($value, $fields[$key]);
  }
}

/**
 * Helper function to fix a interger before we import it to mongodb.
 *
 * @return number
 */
function _ccis_fix_interger(&$value, $key) {
  $fields = _ccis_get_fields_for_fieldtype('number_integer');
  $value = trim($value);
  if (!empty($fields[$key]) && $value != 'NA') {
    $value = (int)$value;
  }
}

/**
 * Helper function to get all fields for the weather data which are certain fieldtype.
 *
 * @return array
 *  The key is the header name of csv data and the value the scale number.
 */
function _ccis_get_fields_for_fieldtype($type) {
  $values = &drupal_static(__FUNCTION__, array());
  if (empty($values)) {
    $field_infos = field_info_instances('node', 'weather_data');
    foreach ($field_infos as $field_name => $info) {
      $field = field_info_field($field_name);
      $key = str_replace('field_', '', $field_name);
      if ($field['type'] == 'number_decimal') {
        $values['number_decimal'][$key] = $field['settings']['scale'];
      }
      elseif ($field['type'] == 'number_integer') {
        $values['number_integer'][$key] = 1;
      }
    }
  }
  return !empty($values[$type]) ? $values[$type] : array();
}

/**
 * Implements hook_css_alter().
 */
function ccis_css_alter(&$css) {
  $file = 'misc/ui/jquery.ui.accordion.css';
  if (isset($css[$file])) {
    unset($css[$file]);
  }
}

/**
 * Implements hook_js_alter().
 */
function ccis_js_alter(&$javascript) {
  $js_file = drupal_get_path('module', 'openlayers') . '/plugins/behaviors/openlayers_behavior_cluster.js';
  if (!empty($javascript[$js_file])) {
    $javascript[$js_file]['data'] = drupal_get_path('module', 'ccis') . '/js/openlayers_behavior_cluster.js';
  }

  $js_file = drupal_get_path('module', 'openlayers') . '/plugins/behaviors/openlayers_behavior_popup.js';
  if (!empty($javascript[$js_file])) {
    $javascript[$js_file]['data'] = drupal_get_path('module', 'ccis') . '/js/openlayers_behavior_popup.js';
  }
  $js_file = drupal_get_path('module', 'openlayers_plus') . '/behaviors/openlayers_plus_behavior_blocktoggle.js';
  if (!empty($javascript[$js_file])) {
    $javascript[$js_file]['data'] = drupal_get_path('module', 'ccis') . '/js/openlayers_plus_behavior_blocktoggle.js';
  }

}

/**
 * Returns a table for the finder list in filter form.
 *
 * @param string $string
 *   Search term
 *
 */
function ccis_search_terms_finder_list($values) {
  $string = $values['searchterm'];
  $region = $values['region'];
  if (empty($string) && empty($region)) {
    return '';
  }
  $search_fields = array_filter(variable_get('ccis_station_search_terms', array()));
  $search_fields = array_keys($search_fields);
  if (empty($search_fields)) {
    return '';
  }
  // TODO Needs ajax support.
  #$query = db_select('node', 'n')->extend('PagerDefault')->limit(2);
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_wmocode', 'f', 'n.nid = f.entity_id');
  if (!empty($region)) {
    $query->leftJoin('field_data_field_stationprovince', 'region', 'n.nid = region.entity_id');
    $query->condition('region.field_stationprovince_value', $region);
  }
  $query->fields('n', array('nid', 'title'));
  $query->fields('f', array('field_wmocode_value'));

  $db_or = db_or();
  foreach ($search_fields as $index => $search_field) {
    $query->leftJoin('field_data_' . $search_field, 'f' . $index, 'n.nid = f' . $index . '.entity_id');
    $f_and = db_and()->condition("f$index.{$search_field}_value", db_like($string) . '%', 'LIKE');
    $db_or = $db_or->condition($f_and);
  }
  $query->condition('n.type', 'weather_station')
  ->condition($db_or)
  ->addTag('node_access');
  $header = array();
  $header_labels = array(t('Station name'), t('WMO Code'), 1, 2);
  foreach ($header_labels as $i => $label) {
    $header[$i] = array(
      'data' => $label,
    );
    if (is_int($label)) {
      $header[$i]['class'] = 'col col-' . $i;
    }
  }
  $rows = array();
  try{
    $results = $query->execute();
    $options = array();
    foreach ($results as $result) {
      $input =  $result->title . ' (' . $result->nid . ')';
      $checkbox1 = array(
        '#type' => 'radio',
        '#name' => 'station[1]',
        '#attributes' => array('data-station' => 1, 'data-station-input' => $input),
      );
      $checkbox2 = array(
        '#type' => 'radio',
        '#name' => 'station[2]',
        '#attributes' => array('data-station' => 2, 'data-station-input' => $input),
      );
      $rows[] = array(
          $result->title,
          $result->field_wmocode_value,
          array('data' => drupal_render($checkbox1)),
          array('data' => drupal_render($checkbox2)),
      );
    }
  }
  catch (Exception $e) {
    watchdog_exception('ccis', $e);
  }
  $vars = array('header' => $header, 'rows' => $rows, 'empty' => t('Did not found a station'));
  // TODO Needs Ajax support.
  // return theme('table', $vars). theme('pager');
  return theme('table', $vars);
}

/**
 * Ajax callback for the search term.
 *
 * @see ccis_block_filter_form
 */
function ccis_block_filter_form_ajax_searchterms($form, $form_state) {
  return $form['searchresult'];
}

/**
 * Returns a array of stored regions of the weather stations.
 *
 * @return array
 */
function _ccis_get_station_regions() {
  $query = db_select('node', 'n');
  $query->join('field_data_field_stationprovince', 'f', 'n.nid = f.entity_id');
  $query->fields('f', array('field_stationprovince_value'));
  $query->condition('n.status', NODE_PUBLISHED);
  $query->addTag('node_access');
  try{
    $results = $query->execute()->fetchCol();
  }
  catch (Exception $e) {
    $results = array();
    watchdog_exception('ccis', $e);
  }
  $options = array();
  foreach ($results as $result) {
    $options[$result] = $result;
  }
  return $options;
}

/**
 * Returns the translated label of a range.
 *
 * @param string $range
 *   The range yearly|monthly|daily|10_days.
 *
 * @return string
 *    The translated range label.
 */
function _ccis_get_range_label($range = NULL) {
  $ranges = array(
    'yearly' => t('Yearly'),
    'monthly' => t('Monthly'),
    'daily' => t('Daily'),
    '10_days' => t('10 Days'),
  );
  return (isset($ranges[$range])) ? $ranges[$range] : (!is_null($range) ? $ranges : t('Unknown'));
}