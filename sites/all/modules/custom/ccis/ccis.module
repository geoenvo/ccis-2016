<?php

/**
 * Implement hook_menu().
 */
function ccis_menu() {
  $items['ccis/import'] = array(
    'title' => 'CSV Import',
    'access arguments' => array('csv_import'),
    'page callback' => 'ccis_import_page',
  );
  $items['ccis/dataquery/%'] = array(
    'title' => 'Data query',
    'access callback' => TRUE,
    'page callback' => 'ccis_dataquery_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ccis/autocomplete/%'] = array(
    'title' => 'Autocomplete',
    'access callback' => TRUE,
    'page callback' => 'ccis_autocomplete_response',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function ccis_permission() {
  $perms['csv_import'] = array(
    'title' => t('CSV import'),
    'description' => t('Allows a user to import the csv files from the csv_incoming directory inside the private file system.')
  );
  $perms['delete_collections'] = array(
    'title' => t('Delete mongoDB collections'),
    'description' => t('Allows a user to delete a mongoDB collection via GUI.')
  );
}

/**
 * Implement hook_block_info().
 */
function ccis_block_info() {
  $blocks['filter'] = array(
    'info' => 'Station Filter',
  );
  $blocks['stationinfo'] = array(
    'info' => 'Station Info',
  );
  $blocks['stationmap'] = array(
    'info' => 'Station map',
  );
  $blocks['d3'] = array(
    'info' => 'D3 Graph',
  );
  $blocks['datatables'] = array(
    'info' => 'Datatable',
  );
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function ccis_block_view($delta) {
  $block = array();
  $station = isset($_GET['station']) ? $_GET['station'] : NULL;
  $node = _ccis_get_station_node(array('station' => $station));
  switch ($delta) {
    case 'filter':
      $block['subject'] = '<none>';
      $block['content'] =  _ccis_block_filter();
      break;
    case 'd3':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_d3();
      break;
    case 'datatables':
      $list = _ccis_get_listname($node);
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_datatables($list);
      break;
    case 'stationinfo':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_stationinfo($node);
      break;
    case 'stationmap':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_stationmap($node);
      break;
  }
  return $block;
}

/**
 * Page callback to import csv files.
 */
function ccis_import_page() {
  $import_form = drupal_get_form('ccis_import_files_form');
  $output = drupal_render($import_form);
  if (user_access('delete_collections')) {
    $delete_form = drupal_get_form('ccis_collection_delete_form');
    $output .= drupal_render($delete_form);
  }
  return $output;
}

/**
 * The form to import the csv files from the directory inside private://csv_incoming.
 */
function ccis_import_files_form() {
  $files = file_scan_directory('private://csv_incoming', '/(\.\.?|\.csv)$/');
  $options = array();
  $header = array('filename' => t('Filename'));
  foreach ($files as $file) {
    $options[$file->uri] = array('filename' => $file->filename);
  }
  $form['files'] = array(
    '#title' => t('Files'),
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No files available.'),
  );
  $form['#fileobj'] = $files;
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Submit handler for ccis_import_files_form().
 */
function ccis_import_files_form_submit($form, $form_state) {
  $files = array_filter($form_state['values']['files']);
  if (!empty($files)) {
    $operations = array();
    foreach ($files as $filepath) {
      $file = $form['#fileobj'][$filepath];
      $operations[] = array('ccis_import_csv_file', array($file));
    }
    $batch = array(
      'operations'    => $operations,
      'title'         => 'Import files',
    );
    batch_set($batch);
  }
}

/**
 * Batch api callback to import a csv file.
 *
 * @see ccis_import_files_form_submit
 */
function ccis_import_csv_file($file, &$context) {
  $context['message'] = t('Importing @file', array('@file' => $file->filename));
  try{
    $row = 1;
    $header = $end_data = array();
    $header_count = 0;
    if (($handle = fopen($file->uri, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        if ($row == 1) {
          $header = $data;
          $header_count = count($header);
        }
        else{
          $data_count = count($data);
          if ($data_count !== $header_count) {
            continue;
          }
          $end_data[] = array_combine($header, $data);
        }
        $row++;
      }
      fclose($handle);
    }
    $col = mongodb_collection($file->name);
    $col->drop();
    $col->batchInsert($end_data);
  }
  catch (Exception $e ) {
    watchdog_exception('ccis', $e);
  }
  file_unmanaged_delete($filepath);
}

/**
 * The form lists the mongoDB collections to delete it via GUI.
 */
function ccis_collection_delete_form() {
  try {
    $m = mongodb();
    $collections = $m->getCollectionNames();
  }
  catch (Exception $e) {
    watchdog_exception('ccis', $e);
  }
  $options = array();
  $header = array(
      'collection' => t('Collection')
  );
  foreach ( $collections as $collection ) {
    $options[$collection] = array(
      'collection' => $collection
    );
  }
  $form['collections'] = array(
      '#title' => t('Collections'),
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No collection available.')
  );
  $form['actions'] = array(
      '#type' => 'actions'
  );
  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Delete')
  );
  return $form;
}

/**
 * Submit handler for ccis_collection_delete_form().
 */
function ccis_collection_delete_form_submit($form, $form_state) {
  $collections = array_filter($form_state['values']['collections']);
  if (!empty($collections)) {
    try{
      $m = mongodb();
      foreach ($collections as $col_name) {
        $collection = $m->selectCollection($col_name);
        $collection->drop();
      }
    }
    catch (Exception $e) {
      watchdog_exception('ccis', $e);
      drupal_set_message(t('Could not delete the collections. See logs for more informations.'));
    }
  }
}

/**
 * Return the json or csv output of a list.
 * @param string $list
 *   The list name like bremen_daily, bremen_monthly etc.
 * @param string $format
 *   The output format json or csv. Default json.
 */
function ccis_dataquery_page($list, $source = 'unknown', $format = 'json') {
  $supported_formats = array('json', 'csv');
  $supported_sources = array('d3', 'datatables');
  $error = FALSE;
  if (!in_array($format, $supported_formats)) {
    watchdog('ccis', 'Overgiven format: @format is not supported', array('@format' => $format), WATCHDOG_ERROR);
    $error = TRUE;
  }
  if (!in_array($source, $supported_sources)) {
    watchdog('ccis', 'Overgiven source: @source is not supported', array('@source' => $source), WATCHDOG_ERROR);
    $error = TRUE;
  }
  if ($error) {
    drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
    echo json_encode(array());
    drupal_exit();
  }
  try{
    $col = mongodb_collection($list);
    $docs = $col->find();
    $output = $header = array();
    if ($docs->hasNext()) {
      foreach ($docs as $doc) {
        unset($doc['_id']);
        static $tmp;
        if (empty($tmp)) {
          foreach ($doc as $key => $val) {
            $field = field_info_field('field_' . $key);
            if (field_access('view', $field, 'node')) {
              $tmp[$key] = $val;
            }
          }
        }
        foreach ($doc as $key => $val) {
          if (!isset($tmp[$key])) {
            unset($doc[$key]);
          }
        }
        if ($source == 'datatables') {
          $output[] = array_values($doc);
        }
        else{
          $output[] = $doc;
        }
      }
      if ($format == 'json') {
        drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
        if ($source == 'datatables') {
          echo json_encode(array('aaData' => $output));
        }
        else{
          echo json_encode($output);
        }
      }
      else{
        $header = array_keys(reset($output));
        $output = array_merge(array($header), $output);
        drupal_add_http_header('Content-Type', 'text/csv; charset=utf-8');
        echo _ccis_outputCSV($output);
      }
    }
    else{
      drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
      if ($source == 'datatables') {
       echo json_encode(array('aaData' => $output));
      }
      else{
        echo json_encode($output);
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('ccis', $e);
  }
  drupal_exit();
}


/**
 * Copy from http://www.php.net/manual/de/function.fputcsv.php#100033
 */
function _ccis_outputCSV($data) {

  $outstream = fopen("php://output", 'w');

  function __outputCSV(&$vals, $key, $filehandler) {
    fputcsv($filehandler, $vals, ',', '"');
  }
  array_walk($data, '__outputCSV', $outstream);

  fclose($outstream);
}

/**
 * Block output for the filter.
 */
function _ccis_block_filter() {
  $form = drupal_get_form('_ccis_block_filter_form');
  return drupal_render($form);
}

/**
 * Filter form.
 */
function _ccis_block_filter_form($form, $form_state) {
  $form['station'] = array(
    '#title' => t('WMO Code or station number'),
    '#type' => 'textfield',
    '#size' => 5,
  );
  $form['station_name'] = array(
    '#title' => t('Station name'),
    '#type' => 'textfield',
    '#size' => 5,
    '#autocomplete_path' => 'ccis/autocomplete/station_name',
  );
//   $form['range'] = array(
//     '#type' => 'date_popup',
//     '#date_year_range' => '-100:0',
//     '#date_format' => 'd.m.Y'
//   );
  $form['actions'] = array('#type' => 'actions');

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#ajax' => array('callback' => '_ccis_block_filter_form_ajax_submit'),
    '#attributes' => array('class' => array('use-ajax-submit')),
  );
  return $form;
}

/**
 * Submit handler for the form _ccis_block_filter_form().
 */
function _ccis_block_filter_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $form_state['redirect'] = array(current_path(), array('query' => $form_state['values']));
}

function _ccis_block_filter_form_ajax_submit($form, &$form_state) {
  #dsm($form_state['values']);
  $station = $form_state['values']['station'];
  $node = _ccis_get_station_node($form_state['values']);
  $list = _ccis_get_listname($node, 'daily');
  $settings = _ccis_get_d3_settings($list);
  $commands[] = ajax_command_settings($settings, TRUE);
  $commands[] = ajax_command_replace('#ccis-weather-datatable-block', _ccis_block_datatables($list));
  $commands[] = ajax_command_replace('#ccis-station-info-block', _ccis_block_stationinfo($node));
  $commands[] = ajax_command_replace('#ccis-station-map-block', _ccis_block_stationmap($node));

  return array('#type' => 'ajax', '#commands' => $commands);

}

/**
 * Block output for the D3 graph.
 */
function _ccis_block_d3() {
  $d3 = libraries_get_path('d3');
  drupal_add_js($d3. '/d3.v3.min.js');
  $path = drupal_get_path('module', 'ccis');
  drupal_add_js($path . '/js/d3.ccis.js');
  drupal_add_js(_ccis_get_d3_settings('unknown'), 'setting');
  return '<div id="ccis-weather-d3-block"></div>';
}

function _ccis_get_d3_settings($list = 'unknown') {
  $fields = array(
      'station' => t('Station'),
      'date' => t('Date'),
      'avg_temp' => t('Average mean temperature'),
      'avg_prec' => t('Average precipitation amount'),
      'avg_press' => t('Average sea level pressure'),
      'avg_min_temp' => t('Average min temperature'),
      'avg_max_temp' => t('Average max temperature'),
  );
  $legends = array();
  foreach ($fields as $key => $title) {
    $field = field_info_field('field_' . $key);
    if (field_access('view', $field, 'node')) {
      $legends[] = $title;
    }
  }
  $settings = array(
      'ccis' => array(
          'stations' => array(
              array(
                  'selector' => 'ccis-weather-d3-block',
                  'path' => url("ccis/dataquery/$list/d3"),
              ),
          ),
          'legends' => $legends,
      ),
  );
  return $settings;
}

/**
 * Block output for the datatables.
 */
function _ccis_block_datatables($list = 'unknown') {
//   $d3 = libraries_get_path('datatables');
//   drupal_add_js($d3. '/media/js/jquery.dataTables.min.js');
//   $path = drupal_get_path('module', 'ccis');
//   drupal_add_js($path . '/js/datatable.ccis.js');

  $fields = array(
    'station' => t('Station'),
    'date' => t('Date'),
    'avg_temp' => t('Average mean temperature'),
    'avg_prec' => t('Average precipitation amount'),
    'avg_press' => t('Average sea level pressure'),
    'avg_min_temp' => t('Average min temperature'),
    'avg_max_temp' => t('Average max temperature'),
  );
  $header = array();
  foreach ($fields as $key => $title) {
    $field = field_info_field('field_' . $key);
    if (field_access('view', $field, 'node')) {
      $header[] = array('data' => $title);
    }
  }
  $rows = array(array());
  $vars = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => 'ccis_datatables',
      'datatable_options' => array(
        'bProcessing' => true,
        'sAjaxSource' => url("ccis/dataquery/$list/datatables"),
      ),
    ),
  );
  $output = '<div id="ccis-weather-datatable-block">';
  $output .= theme('datatable', $vars);
  $output .= '</div>';
  return $output;
}

function _ccis_get_station_node($form_values) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'weather_station');
  if (!empty($form_values['station'])) {
    $query->fieldCondition('field_station_number', 'value', $form_values['station'], '=');
  }
  else if (!empty($form_values['station_name'])) {
    $query->propertyCondition('title', $form_values['station_name']);
  }
  $result = $query->execute();
  if (isset($result['node'])) {
    $weather_stations_nids = array_keys($result['node']);
    $weather_stations = entity_load('node', $weather_stations_nids);
    $weather_station = reset($weather_stations);
    return $weather_station;
  }
  return NULL;
}

function _ccis_get_listname($node, $range = 'daily') {
  $list = 'unknown';
  if (!empty($node)) {
    $list = drupal_strtolower($node->title);
    $list = $list . '_' . $range;
  }
  return $list;
}

/**
 * Block output for the Station info.
 */
function _ccis_block_stationinfo($node = NULL) {
  $nid = empty($node) ? NULL : $node->nid;
  $view = views_embed_view('station_info', 'embed_1', $nid);
  $output = '<div id="ccis-station-info-block">';
  $output .= $view;
  $output .= '</div>';
  return $output;
}

/**
 * Block output for the Station map.
 */
function _ccis_block_stationmap($node = NULL) {
  openlayers_include();
  $nid = empty($node) ? NULL : $node->nid;
  $view = views_embed_view('station_map', 'embed_1', $nid);
  $output = '<div id="ccis-station-map-block">';
  $output .= $view;
  $output .= '</div>';
  return $output;
}

/**
 * A wrapper function to use it as autocomplete in the form api.
 *
 * Autocomplete path: ccis/autocomplete/{type}
 *
 * @param string $type
 *   A fixed value.
 *
 * @param string $string
 *   The typed string in the form.
 */
function ccis_autocomplete_response($type, $string) {
  $matches = array();
  if ($type == 'station_name' && $string) {
    $results = db_select('node')
      ->fields('node', array('nid'))
      ->condition('title', db_like($string) . '%', 'LIKE')
      ->condition('type', 'weather_station')
      ->range(0, 10)->execute();
    foreach ($results as $result) {
      $node = node_load($result->nid);
      if (node_access('view', $node)) {
        $matches[$node->title] = check_plain($node->title);
      }
    }
  }
  drupal_json_output($matches);
}