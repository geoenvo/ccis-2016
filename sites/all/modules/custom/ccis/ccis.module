<?php

/**
 * Implement hook_menu().
 */
function ccis_menu() {
  $items['ccis/import'] = array(
    'title' => 'CSV Import',
    'access arguments' => array('csv_import'),
    'page callback' => 'ccis_import_page',
  );
  $items['ccis/dataquery/%'] = array(
    'title' => 'Data query',
    'access callback' => TRUE,
    'page callback' => 'ccis_dataquery_page',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ccis/autocomplete/%'] = array(
    'title' => 'Autocomplete',
    'access callback' => TRUE,
    'page callback' => 'ccis_autocomplete_response',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function ccis_permission() {
  $perms['csv_import'] = array(
    'title' => t('CSV import'),
    'description' => t('Allows a user to import the csv files from the csv_incoming directory inside the private file system.')
  );
  $perms['delete_collections'] = array(
    'title' => t('Delete mongoDB collections'),
    'description' => t('Allows a user to delete a mongoDB collection via GUI.')
  );
  return $perms;
}

/**
 * Implement hook_block_info().
 */
function ccis_block_info() {
  $blocks['filter'] = array(
    'info' => 'Station Filter',
  );
  $blocks['stationinfo'] = array(
    'info' => 'Station Info',
  );
  $blocks['stationmap'] = array(
    'info' => 'Station map',
  );
  $blocks['d3'] = array(
    'info' => 'D3 Graph',
  );
  $blocks['datatables'] = array(
    'info' => 'Datatable',
  );
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function ccis_block_view($delta) {
  $block = array();
  $params = drupal_get_query_parameters();
  $node = _ccis_get_station_node($params);
  switch ($delta) {
    case 'filter':
      $block['subject'] = '<none>';
      $block['content'] =  _ccis_block_filter($node);
      break;
    case 'd3':
      $range = _ccis_get_date_range($params);
      $list = _ccis_get_listname($node, $range);
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_d3($list, $params);
      break;
    case 'datatables':
      $range = _ccis_get_date_range($params);
      $list = _ccis_get_listname($node, $range);
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_datatables($list, $params);
      break;
    case 'stationinfo':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_stationinfo($node);
      break;
    case 'stationmap':
      $block['subject'] = '<none>';
      $block['content'] = _ccis_block_stationmap($node);
      break;
  }
  return $block;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function ccis_field_widget_info_alter(&$info) {
#dpm($info);
  if (!empty($info['file_generic'])) {
    $info['file_generic']['settings']['save_as_mongodb'] = FALSE;
  }
}
/**
 * Implement hook_field_widget_WIDGET_TYPE_form_alter().
 */
function ccis_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  if (!empty($context['field']['field_name']) && $context['field']['field_name'] == 'field_csv_files') {
    foreach (element_children($element) as $delta) {
      $element[$delta]['#upload_validators']['ccis_csv_file_header_validate'] = array();
      $element[$delta]['#upload_validators']['ccis_csv_file_name_validate'] = array();
    }
  }
}

/**
 * Validates a file that it contains the right header data.
 *
 * @see ccis_field_widget_file_generic_form_alter
 * @see ccis_import_csv_file
 *
 * @param object $file
 */
function ccis_csv_file_header_validate($file) {
  $errors = array();
  $row = 1;
  $header = $end_data = array();
  $header_count = 0;
  $expected_fields = _ccis_get_weather_data_labels(FALSE);
  if (($handle = fopen($file->uri, "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
      if ($row == 1) {
        $data = array_map('drupal_strtolower', $data);
        $header = $data;
        $header_count = count($header);
        $expected_fields_count = count($expected_fields);
        if ($header_count !== $expected_fields_count) {
          $errors[] = t('Missing data in @file', array('@file' => $file->filename));
        }
        foreach ($data as $header_name) {
          if (!isset($expected_fields['field_' . $header_name])) {
            $errors[] = t('Unknown data %col in @file', array('@file' => $file->filename, '%col' => $header_name));
          }
        }
        break;
      }
    }
    fclose($handle);
  }
  return $errors;
}

/**
 * Validates the file name that contains a particular pattern and can not uploaded twice.
 *
 * @param object $file
 *   File object.
 *
 * @return array
 *   An array with the error messages.
 */
function ccis_csv_file_name_validate($file) {
  $errors = array();
  if (strpos($file->destination, 'private://csv_incoming/') !== FALSE) {
    preg_match_all('/(\w+)_(yearly|monthly|daily)\.csv/', $file->filename, $matches);
    $matches = array_filter($matches);
    if (empty($matches)) {
      $errors[] = t('The filename must be in this pattern <em>stationname_(daily|monthly|yearly).csv');
      return $errors;
    }
    preg_match_all('/private:\/\/csv_incoming\/(\w+)_(yearly|monthly|daily)\.csv/', $file->destination, $matches);
    $matches = array_filter($matches);
    if (empty($matches)) {
      $errors[] = t('There is already a csv file with this filename %filename', array('%filename' => $file->filename));
    }
  }
  return $errors;
}

// /**
//  * Implements hook_file_insert().
//  */
// function ccis_file_insert($file) {
//   $patters = array('yearly', 'monthly', 'daily');
//   foreach ($patters as $pattern) {
//     if (strpos($file->filename, $pattern) !== FALSE) {
//       if (user_access('csv_import')) {
//         drupal_set_message(t('The file can now be imported to mongoDB. See <a href="@url" target="_blank">Import-Page</a> for more information.', array('@url' => url('ccis/import'))));
//       }
//     }
//   }
// }

/**
 * Page callback to import csv files.
 */
function ccis_import_page() {
  $import_form = drupal_get_form('ccis_import_files_form');
  $output = drupal_render($import_form);
  if (user_access('delete_collections')) {
    $delete_form = drupal_get_form('ccis_collection_delete_form');
    $output .= drupal_render($delete_form);
  }
  return $output;
}

/**
 * The form to import the csv files from the directory inside private://csv_incoming.
 */
function ccis_import_files_form() {
  $files = file_scan_directory('private://csv_incoming', '/(\w+)_(yearly|monthly|daily)\.csv$/');
  $options = array();
  $header = array('filename' => t('Filename'));
  foreach ($files as $file) {
    $options[$file->uri] = array('filename' => $file->filename);
  }
  $form['files'] = array(
    '#title' => t('Files'),
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No files available.'),
  );
  $form['#fileobj'] = $files;
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Submit handler for ccis_import_files_form().
 */
function ccis_import_files_form_submit($form, $form_state) {
  $files = array_filter($form_state['values']['files']);
  if (!empty($files)) {
    $operations = array();
    foreach ($files as $filepath) {
      $file = $form['#fileobj'][$filepath];
      $operations[] = array('ccis_import_csv_file', array($file));
    }
    $batch = array(
      'operations'    => $operations,
      'title'         => 'Import files',
    );
    batch_set($batch);
  }
}

/**
 * Batch api callback to import a csv file.
 *
 * @see ccis_import_files_form_submit
 */
function ccis_import_csv_file($file, &$context) {
  $context['message'] = t('Importing @file', array('@file' => $file->filename));
  $errors = ccis_csv_file_header_validate($file);

  // Check for errors.
  if (!empty($errors)) {
    $message = t('The specified file %name could not be imported.', array('%name' => $file->filename));
    if (count($errors) > 1) {
      $message .= theme('item_list', array('items' => $errors));
    }
    else {
      $message .= ' ' . array_pop($errors);
    }
    form_set_error('', $message);
    return FALSE;
  }
  try{
    $row = 1;
    $header = $end_data = array();
    $header_count = 0;
    $expected_fields = _ccis_get_weather_data_labels(FALSE);
    if (($handle = fopen($file->uri, "r")) !== FALSE) {
      while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        if ($row == 1) {
          $data = array_map('drupal_strtolower', $data);
          $header = $data;
          $header_count = count($data);
        }
        else{
          // Empty data must be comma seperated.
          $data_count = count($data);
          if ($data_count !== $header_count) {
            continue;
          }
          $data = array_combine($header, $data);
          array_walk($data, '_ccis_round');
          $end_data[] = $data;
        }
        $row++;
      }
      fclose($handle);
    }
    $col = mongodb_collection($file->name);
    $col->drop();
    $col->batchInsert($end_data);
  }
  catch (Exception $e ) {
    watchdog_exception('ccis', $e);
  }
}

/**
 * The form lists the mongoDB collections to delete it via GUI.
 */
function ccis_collection_delete_form() {
  try {
    $m = mongodb();
    $collections = $m->getCollectionNames();
  }
  catch (Exception $e) {
    watchdog_exception('ccis', $e);
  }
  $options = array();
  $header = array(
    'collection' => t('Collection')
  );
  foreach ( $collections as $collection ) {
    $options[$collection] = array(
      'collection' => $collection
    );
  }
  $form['collections'] = array(
    '#title' => t('Collections'),
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No collection available.'),
  );
  $form['actions'] = array(
    '#type' => 'actions'
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete')
  );
  return $form;
}

/**
 * Submit handler for ccis_collection_delete_form().
 */
function ccis_collection_delete_form_submit($form, $form_state) {
  $collections = array_filter($form_state['values']['collections']);
  if (!empty($collections)) {
    try{
      $m = mongodb();
      foreach ($collections as $col_name) {
        $collection = $m->selectCollection($col_name);
        $collection->drop();
      }
    }
    catch (Exception $e) {
      watchdog_exception('ccis', $e);
      drupal_set_message(t('Could not delete the collections. See logs for more informations.'));
    }
  }
}

/**
 * Return the json or csv output of a list.
 * @param string $list
 *   The list name like bremen_daily, bremen_monthly etc.
 * @param string $format
 *   The output format json or csv. Default json.
 */
function ccis_dataquery_page($list, $source = 'unknown', $format = 'json') {
  $supported_formats = array('json', 'csv');
  $supported_sources = array('d3', 'datatables');
  $error = FALSE;
  if (!in_array($format, $supported_formats)) {
    watchdog('ccis', 'Overgiven format: @format is not supported', array('@format' => $format), WATCHDOG_ERROR);
    $error = TRUE;
  }
  if (!in_array($source, $supported_sources)) {
    watchdog('ccis', 'Overgiven source: @source is not supported', array('@source' => $source), WATCHDOG_ERROR);
    $error = TRUE;
  }
  if ($error) {
    drupal_json_output(array());
    drupal_exit();
  }
  $params = drupal_get_query_parameters();
  try{
    $col = mongodb_collection($list);
    $query = array();
    if (!empty($params['start']) && !empty($params['end'])) {
      $query = array('date' => array('$gte' => $params['start'], '$lt' => $params['end']));
    }
    $limit = variable_get('ccis_default_displayed_data_limit', 180);
    $labels = _ccis_get_weather_data_labels();
    $fields = array();
    foreach ($labels as $key => $label) {
      $_key = str_replace('field_', '', $key);
      $fields[$_key] = TRUE;
    }
    $docs = $col->find($query, $fields)->limit($limit);
    $output = $header = array();
    if ($docs->hasNext()) {
      foreach ($docs as $doc) {
        unset($doc['_id']);
        if ($source == 'datatables') {
          $output[] = array_values($doc);
        }
        else{
          $output[] = $doc;
        }
      }
      if ($format == 'json') {
        if ($source == 'datatables') {
          echo drupal_json_output(array('aaData' => $output));
        }
        else{
          echo drupal_json_output($output);
        }
      }
      else{
        $header = array_keys(reset($output));
        $output = array_merge(array($header), $output);
        drupal_add_http_header('Content-Type', 'text/csv; charset=utf-8');
        echo _ccis_outputCSV($output);
      }
    }
    else{
      if ($source == 'datatables') {
        echo drupal_json_output(array('aaData' => $output));
      }
      else{
        echo drupal_json_output($output);
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('ccis', $e);
  }
  drupal_exit();
}


/**
 * Copy from http://www.php.net/manual/de/function.fputcsv.php#100033
 */
function _ccis_outputCSV($data) {

  $outstream = fopen("php://output", 'w');

  function __outputCSV(&$vals, $key, $filehandler) {
    fputcsv($filehandler, $vals, ',', '"');
  }
  array_walk($data, '__outputCSV', $outstream);

  fclose($outstream);
}

/**
 * Block output for the filter.
 */
function _ccis_block_filter($node) {
  $form = drupal_get_form('_ccis_block_filter_form', $node);
  return drupal_render($form);
}

/**
 * Filter form.
 */
function _ccis_block_filter_form($form, $form_state, $node = NULL) {
  $form['input'] = array(
    '#title' => t('Search string'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'ccis/autocomplete/station_search',
    '#title_display' => 'invisible',
    '#description' => t('Enter a station name, Station code etc.'),
    '#default_value' => isset($node->title) ? "$node->title ($node->nid)" : '',
  );
  $form['start'] = array(
    '#title' => t('From'),
    '#type' => 'date_popup',
    '#date_year_range' => '-100:0',
    '#date_format' => 'd.m.Y',
  );
  $form['end'] = array(
    '#title' => t('To'),
    '#type' => 'date_popup',
    '#date_year_range' => '-100:0',
    '#date_format' => 'd.m.Y',
  );
  $form['actions'] = array('#type' => 'actions');

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#ajax' => array('callback' => '_ccis_block_filter_form_ajax_submit'),
    '#attributes' => array('class' => array('use-ajax-submit')),
  );
  return $form;
}


/**
 * Submit handler for the form _ccis_block_filter_form().
 */
function _ccis_block_filter_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $form_state['redirect'] = array(current_path(), array('query' => $form_state['values']));
}

function _ccis_block_filter_form_ajax_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $node = _ccis_get_station_node($form_state['values']);

  $range = _ccis_get_date_range($form_state['values']);
  $list = _ccis_get_listname($node, $range);
  $settings = _ccis_get_d3_settings($list, $form_state['values']);
  $commands[] = ajax_command_settings($settings, TRUE);
  $commands[] = ajax_command_replace('#ccis-weather-datatable-block', _ccis_block_datatables($list, $form_state['values']));
  $commands[] = ajax_command_replace('#ccis-station-info-block', _ccis_block_stationinfo($node));
  $commands[] = ajax_command_replace('#ccis-station-map-block', _ccis_block_stationmap($node));

  return array('#type' => 'ajax', '#commands' => $commands);

}

/**
 * Block output for the D3 graph.
 */
function _ccis_block_d3($list, $params) {
  $d3 = libraries_get_path('d3');
  drupal_add_js($d3. '/d3.v3.min.js');
  $path = drupal_get_path('module', 'ccis');
  drupal_add_js($path . '/js/d3.ccis.js');
  drupal_add_js(_ccis_get_d3_settings($list, $params), 'setting');
  return '<div id="ccis-weather-d3-block"></div>';
}

function _ccis_get_d3_settings($list = 'unknown', $values) {
  $settings = array(
      'ccis' => array(
          'stations' => array(
              array(
                  'selector' => 'ccis-weather-d3-block',
                  'path' => url("ccis/dataquery/$list/d3", array('query' => $values)),
              ),
          ),
          'legends' => array_values(_ccis_get_weather_data_labels()),
      ),
  );
  return $settings;
}

/**
 * Block output for the datatables.
 */
function _ccis_block_datatables($list = 'unknown', $values) {
  $labels = _ccis_get_weather_data_labels();
  $header = array();
  foreach ($labels as $label) {
    $header[] = array('data' => $label);
  }
  $rows = array(array());
  $vars = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(
      'id' => 'ccis_datatables',
      'datatable_options' => array(
        'bProcessing' => true,
        'sAjaxSource' => url("ccis/dataquery/$list/datatables", array('query' => $values)),
      ),
    ),
  );
  $output = '<div id="ccis-weather-datatable-block">';
  $output .= theme('datatable', $vars);
  $output .= '</div>';
  return $output;
}

function _ccis_get_station_node($values) {
  $nid = NULL;
  if (isset($values['nid'])) {
    $nid = $values['nid'];
  }
  elseif (isset($values['input'])) {
    $pattern = "/(.+)\((\d+)\)/";
    preg_match($pattern, $values['input'], $matches);
    $nid = isset($matches[2]) ? $matches[2] : NULL;
  }
  if (!empty($nid)) {
    return node_load($nid);
  }
  return NULL;
}

function _ccis_get_date_range($values) {
  $range = 'yearly';
  if (empty($values['start']) || empty($values['end'])) {
    return $range;
  }
  $date1 = $values['start'];
  $date2 = $values['end'];

  $diff = abs(strtotime($date2) - strtotime($date1));

  $years = floor($diff / (365*60*60*24));
  $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
  $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));
  if ($years < 15) {
    $range = 'monthly';
    if ($years < 5 && $years > 1) {
      $range = 'monthly'; // TODO
    }
    if ($years < 1) {
      $range = 'daily';
    }
  }
  return $range;
}

function _ccis_get_listname($node, $range) {
  $list = 'unknown';
  if (!empty($node)) {
    $items = field_get_items('node', $node, 'field_mongodb_list_name');
    if (!empty($items)) {
      $item = reset($items);
      $list = $item['safe_value'];
    }
    else{
      $list = drupal_strtolower($node->title);
      $list = str_replace(' ', '', $list);
    }
    $list = $list . '_' . $range;
  }
  return $list;
}

/**
 * Block output for the Station info.
 */
function _ccis_block_stationinfo($node = NULL) {
  $nid = empty($node) ? NULL : $node->nid;
  $view = views_embed_view('station_info', 'embed_1', $nid);
  $output = '<div id="ccis-station-info-block">';
  $output .= $view;
  $output .= '</div>';
  return $output;
}

/**
 * Block output for the Station map.
 */
function _ccis_block_stationmap($node = NULL) {
  openlayers_include();
  $nid = empty($node) ? NULL : $node->nid;
  $view = views_embed_view('station_map', 'embed_1', $nid);
  $output = '<div id="ccis-station-map-block">';
  $output .= $view;
  $output .= '</div>';
  return $output;
}

/**
 * A wrapper function to use it as autocomplete in the form api.
 *
 * Autocomplete path: ccis/autocomplete/{type}
 *
 * @param string $type
 *   A fixed value.
 *
 * @param string $string
 *   The typed string in the form.
 */
function ccis_autocomplete_response($type, $string) {
  $matches = array();
  if ($type == 'station_search' && $string) {

    $query = db_select('node', 'n');
    $query->leftJoin('field_data_field_wmocode', 'f', 'n.nid = f.entity_id');
    $query->leftJoin('field_data_field_address_data', 'f2', 'n.nid = f2.entity_id');

    $n_and = db_and()->condition('n.title', db_like($string) . '%', 'LIKE');
    $f_and = db_and()->condition('f.field_wmocode_value', db_like($string) . '%', 'LIKE');
    $f2_and = db_and()->condition('f2.field_address_data_value', '%' . db_like($string) . '%', 'LIKE');

    $query->fields('n', array('nid', 'title'))
      ->fields('f', array('field_wmocode_value'))
      ->condition('n.type', 'weather_station')
      ->condition(db_or()->condition($n_and)->condition($f_and)->condition($f2_and))
      ->addTag('node_access')
      ->range(0, 10);
    try{
      $results = $query->execute();
      foreach ($results as $result) {
        // $key will be placed in the input field after the user choose a suggention.
        $key = $result->title . ' (' . $result->nid . ')';
        // $title will be shown to user underneath input field will he typing.
        $title = check_plain("$result->title (WMO Code: $result->field_wmocode_value) ");
        $matches[$key] = $title;
      }
    }
    catch (Exception $e) {
      watchdog_exception('ccis', $e);
    }
  }
  drupal_json_output($matches);
}

/**
 * Returns the labels of all fields, with optional access checks.
 *
 * @param array $check
 *   Set to FALSE when you do not want the field_access() check. Default TRUE.
 *
 * @return array
 *   An array of field labels keyed by field names.
 */
function _ccis_get_weather_data_labels($check = TRUE) {
  $labels = &drupal_static(__FUNCTION__, array());
  if (empty($labels)) {
    $tmp = array();
    $field_infos = field_info_instances('node', 'weather_data');
    foreach ($field_infos as $field_name => $info) {
      $tmp[$field_name] = array('label' => $info['label'], 'weight' => $info['widget']['weight']);
      if ($check) {
        $field = field_info_field($field_name);
        if (!field_access('view', $field, 'node')) {
          unset($tmp[$field_name]);
        }
      }
    }
    uasort($tmp, 'drupal_sort_weight');
    foreach ($tmp as $key => $value) {
      $labels[$key] = t($value['label']);
    }
  }
  return $labels;
}

/**
 * Helper function to round a number before we import it to mongodb.
 *
 * @return number
 */
function _ccis_round(&$value, $key) {
  $fields = _ccis_get_to_round_fields();
  if (!empty($fields[$key])) {
    $value = round($value, $fields[$key]);
  }
}

/**
 * Helper function to get all fields for the weather data which are decimal.
 *
 * @return array
 *  The key is the header name of csv data and the value the scale number.
 */
function _ccis_get_to_round_fields() {
  $round = &drupal_static(__FUNCTION__, array());
  if (empty($round)) {
    $field_infos = field_info_instances('node', 'weather_data');
    foreach ($field_infos as $field_name => $info) {
      $field = field_info_field($field_name);
      if ($field['type'] == 'number_decimal') {
        $key = str_replace('field_', '', $field_name);
        $round[$key] = $field['settings']['scale'];
      }
    }
  }
  return $round;
}
